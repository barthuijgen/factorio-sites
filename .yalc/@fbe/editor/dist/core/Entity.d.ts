import { EventEmitter } from 'eventemitter3';
import { Entity as FD_Entity } from './factorioData';
import { Blueprint } from './Blueprint';
export interface IFilter {
    index: number;
    name: string;
    count?: number;
}
export declare class Entity extends EventEmitter {
    private readonly m_rawEntity;
    private readonly m_BP;
    constructor(rawEntity: BPS.IEntity, blueprint: Blueprint);
    static getItemName(name: string): string;
    destroy(): void;
    get Blueprint(): Blueprint;
    get entityNumber(): number;
    get name(): string;
    get type(): string;
    get entityData(): FD_Entity;
    get size(): IPoint;
    get position(): IPoint;
    set position(position: IPoint);
    get maxWireDistance(): number;
    moveBy(offset: IPoint): void;
    get direction(): number;
    set direction(direction: number);
    get directionType(): 'input' | 'output';
    set directionType(type: 'input' | 'output');
    get recipe(): string;
    set recipe(recipe: string);
    get acceptedRecipes(): string[];
    get moduleSlots(): number;
    get acceptedModules(): string[];
    get acceptedFilters(): string[];
    get modules(): string[];
    set modules(modules: string[]);
    get filterSlots(): number;
    get filters(): IFilter[];
    set filters(list: IFilter[]);
    get splitterInputPriority(): string;
    set splitterInputPriority(priority: string);
    get splitterOutputPriority(): string;
    set splitterOutputPriority(priority: string);
    private get splitterFilter();
    private set splitterFilter(value);
    get filterMode(): 'whitelist' | 'blacklist';
    set filterMode(filterMode: 'whitelist' | 'blacklist');
    private get inserterFilters();
    private set inserterFilters(value);
    private get logisticChestFilters();
    private set logisticChestFilters(value);
    private get infinityChestFilters();
    private get infinityPipeFilters();
    get requestFromBufferChest(): boolean;
    set requestFromBufferChest(request: boolean);
    get inserterStackSize(): number;
    get constantCombinatorFilters(): BPS.IConstantCombinatorFilter[];
    get deciderCombinatorConditions(): BPS.IDeciderCondition;
    get arithmeticCombinatorConditions(): BPS.IArithmeticCondition;
    get generateConnector(): boolean;
    private get connectToLogisticNetwork();
    private get hasConnections();
    get chemicalPlantDontConnectOutput(): boolean;
    get trainStopColor(): BPS.IColor;
    get operator(): string;
    private get canBeRotated();
    rotate(ccw?: boolean, rotateOpposingUB?: boolean): void;
    canPasteSettings(sourceEntity: Entity): boolean;
    pasteSettings(sourceEntity: Entity): void;
    get assemblerCraftsWithFluid(): boolean;
    get mayCraftWithFluid(): boolean;
    get assemblerPipeDirection(): 'input' | 'output';
    getWireConnectionPoint(color: string, side: number, direction?: number): number[];
    serialize(entNrWhitelist?: Set<number>): BPS.IEntity;
}
